
create table ks_sessions (
    id                   number        generated by default on null as identity (start with 1) primary key
  , event_id             number
  , event_track_id       number
  , session_num          number not null
  , submission_date      date
  , sub_category         varchar2(500)
  , session_type         varchar2(500)
  , title                varchar2(500)
  , presenter            varchar2(500)
  , company              varchar2(500)
  , co_presenter_company varchar2(500)
  , co_presenter         varchar2(500)
  , status_code          varchar2(20)
  , notes                varchar2(4000)
  , tags                 varchar2(4000)
  , presenter_email      varchar2(500)
  , session_summary      varchar2(4000)
  , session_abstract     clob
  , target_audience      varchar2(60)
  , presented_before_ind  varchar2(1) default on null 'N'
  , presented_before_where varchar2(4000)
  , presented_anything_ind varchar2(1)
  , presented_anything_where varchar2(4000)
  , technology_product   varchar2(500)
  , ace_level            varchar2(30)
  , video_link           varchar2(4000)
  , contains_demo_ind    varchar2(1) default on null 'N'
  , webinar_willing_ind  varchar2(1) default on null 'N'
  , presenter_biography  clob
  , external_sys_ref     varchar2(20)
  , presenter_user_id    varchar2(20)
  , co_presenter_user_id varchar2(20)
  , room_size_code       varchar2(20)
  , created_by           varchar2(60) default
                           coalesce(
                              sys_context('APEX$SESSION','app_user')
                              ,regexp_substr(sys_context('userenv','client_identifier'),'^[^:]*')
                              ,sys_context('userenv','session_user')
                              )
                           not null
  , created_on           date         default sysdate not null
  , updated_by           varchar2(60)
  , updated_on           date
  , constraint sessions_ck_presb4_is_yn check (presented_before_ind in ('Y', 'N'))
  , constraint sessions_ck_demo_is_yn check (contains_demo_ind in ('Y', 'N'))
  , constraint sessions_ck_web_will_is_yn check (webinar_willing_ind in ('Y', 'N'))
  , constraint ks_sessions_pres_any_yn check (presented_anything_ind in ('Y','N'))
  , constraint ks_events_fk foreign key ( event_id ) references ks_events ( id ) not deferrable
  , constraint ks_event_track_sessions_fk foreign key ( event_track_id ) references ks_event_tracks ( id ) not deferrable
)
/

create unique index ks_sessions_u01 on ks_sessions(event_id, session_num);
create index ks_sessions_n01 on ks_sessions(event_id);
create index ks_sessions_n02 on ks_sessions(event_track_id);

comment on table ks_sessions is 'Event Sessions.';

comment on column ks_sessions.session_num is 'Unique session identifier assigned by ODTUG';
comment on column ks_sessions.event_id is 'Event this session belongs to.';
comment on column ks_sessions.event_track_id is 'Track this session was submitted.';
comment on column ks_sessions.presenter is 'The name of the presenter for this session.';
comment on column ks_sessions.company is 'The company the presenter works for.';
comment on column ks_sessions.room_size_code is 'Define the size for a room S|M|L';
comment on column ks_sessions.presented_before_ind is 'Whether the session has been presented before';
comment on column ks_sessions.presented_before_where is 'Where the presentaton been done before';
comment on column ks_sessions.presented_anything_ind is 'Whether the presenter has ever done a live presentation(s), anywhere for anything.';
comment on column ks_sessions.presented_anything_where is 'Where the presenter has done live presentation (of any kind)';
comment on column ks_sessions.created_by is 'User that created this record';
comment on column ks_sessions.created_on is 'Date the record was first created';
comment on column ks_sessions.updated_by is 'User that last modified this record';
comment on column ks_sessions.updated_on is 'Date the record was last modified';

create or replace trigger ks_sessions_iu_trg
before insert or update
on ks_sessions
referencing old as old new as new
for each row
begin
  if updating then
    :new.updated_on := sysdate;
    :new.updated_by := coalesce(
                         sys_context('APEX$SESSION','app_user')
                         ,regexp_substr(sys_context('userenv','client_identifier'),'^[^:]*')
                         ,sys_context('userenv','session_user')
                       );
  end if;
/* this install trigger gets replaces by ks_tags_post_install.sql
  ks_tags_api.tag_sync(
     p_new_tags      => :new.tags,
     p_old_tags      => :old.tags,
     p_content_type  => 'SESSION',
     p_content_id    => :new.session_num );
*/
end;
/
