{
  "scope": null,
  "attribute": 4,
  "label": "Custom template",
  "type": "Textarea",
  "required": "Yes",
  "common": "Yes",
  "showInWizard": "Yes",
  "defaultValue": null,
  "displayWidth": null,
  "maximumLength": null,
  "unit": null,
  "minimumColumns": null,
  "maximumColumns": null,
  "dataTypes": null,
  "parentAttributeId": null,
  "lovType": null,
  "lovComponentTypeId": null,
  "onDeleteBehavior": null,
  "setTextCase": null,
  "lovNullText": null,
  "userInterface": null,
  "supportedComponentTypes": null,
  "translatable": "No",
  "dependingOn": "Mode",
  "alwaysEvaluate": "Yes",
  "conditionType": "in list",
  "expression": "CTDC,CTCC",
  "includeColumnsInItemsPicker": "Component",
  "examples": "<p>\n  Assuming your details query is defined as below:\n</p>\n<pre>\nselect\n  CUSTOMER_ID,\n  CUST_FIRST_NAME as \"First name\",\n  CUST_LAST_NAME,\n  PHONE_NUMBER1,\n  CREDIT_LIMIT\nfrom\n  DEMO_CUSTOMERS\nwhere\n  customer_id = #CUSTOMER_ID#\n</pre>\n<p>\n  Your custom template might look like:\n</p>\n<pre>\n<table>\n  <tr>\n    <th>Column name</th>\n    <th>Column type</th>\n  </tr>\n  {{#headers}}\n  <tr>\n    <td>{{COLUMN_NAME}}</td>\n    <td>{{COLUMN_TYPE}}</td>\n  </tr>\n  {{/headers}}\n</table>\n{{#data}}\n<div class=\"customRow\">\n  <div>\n    <span class=\"label\">\n      Customer name\n    </span>\n    <span class=\"value\">\n      <span class=\"fa fa-user\"></span> {{First name}} {{CUST_LAST_NAME}}\n    </span>\n  </div>\n  <div>\n    <span class=\"label\">\n      Customer phone number\n    </span>\n    <span class=\"value\">\n      <span class=\"fa fa-phone\"></span> {{PHONE_NUMBER1}}\n    </span>\n  </div>\n  <div>\n    <span class=\"label\">\n      Customer credit limit\n    </span>\n    <span class=\"value\">\n      <span class=\"fa fa-credit-card\"></span> {{CREDIT_LIMIT}}\n    </span>\n  </div>\n</div>\n{{/data}}  \n</pre>\n<p>\ncolumn CUST_FIRST_NAME is referenced by its alias {{First name}} defined in details query. Others columns are referenced by their names.\n</p>\n<p>\n  List of columns are presented in table with two columns and rows of data are rendered in div blocks.\n</p>\n<h4>Example CSS</h4>\n<pre>\n.customRow > div {\n  display: inline-block;\n  margin-right: 10px;\n}\n \n.customRow > div:last-child {\n  margin-right: 0px;\n}\n \n.customRow span.label {\n  font-weight: bold;\n  display: block;\n}\n.customRow span.value {\n  font-size: 120%;\n  padding: 5px;\n  display: block;\n}  \n</pre>",
  "helpText": "<p>\n  Templates are rendered by Mustache JavaScript library. To read more about Mustache API vistit https://github.com/janl/mustache.js#usage.\n</p>\n<p>\n  Template is rendered from JSON object with two attributes: data and headers. Data attribute reference array of rows and headers attribute reference array of columns description.\n</p>\n\n<h4>\n  Headers template\n</h4>\n<p>\n  Use {{#headers}} and {{/headers}} tags to mark beginning and ending of header section. To render column name use {{COLUMN_NAME}} and to display column type use {{COLUMN_TYPE}}.\n</p>\n\n<h4>\n  Data template\n</h4>\n<p>\n  Use {{#data}} and {{/data}} to mark beginning and ending of single row template. To render column value use {{COLUMN_NAME}} or {{Column alias}}. \"COLUMN_NAME\" is column name without alias in details query attribute, and \"Column alias\" is column alias in details query attribute.\n</p>\n<p>\n  See examples below to learn how custom template might look like.\n</p>",
  "comment": null
}